pipeline {
    agent { label 'android' }

     environment {
        context_job = 'All Checks'
        context_analysis = 'Code Analysis'
        context_test = 'Tests'
        context_ui_tests = 'UI Tests'
    }

    stages {
        stage('Prepare') {
            steps {
                setGitHubPullRequestStatus(context: env.context_job, message: "Job started", state: "PENDING")
                setGitHubPullRequestStatus(context: env.context_analysis, message: "Job started", state: "PENDING")
                setGitHubPullRequestStatus(context: env.context_test, message: "Job started", state: "PENDING")
                setGitHubPullRequestStatus(context: env.context_ui_tests, message: "Job started", state: "PENDING")
            }
        }
        stage('Checkout') {
            steps {
                checkout([
                        $class                           : 'GitSCM',
                        branches                         : scm.branches,
                        userRemoteConfigs                : scm.userRemoteConfigs,
                        submoduleCfg                     : [],
                        doGenerateSubmoduleConfigurations: false,
                        extensions                       : [
                                [$class: 'CleanBeforeCheckout'],
                                [$class : 'CloneOption',
                                 shallow: true,
                                 depth  : 1000,
                                 noTags : true,
                                 timeout: 30],
                                [$class: 'PreBuildMerge', options:
                                        [fastForwardMode: 'FF',
                                         mergeRemote    : 'origin',
                                         mergeStrategy  : 'default',
                                         mergeTarget    : "${env.GITHUB_PR_TARGET_BRANCH}"]
                                ]
                        ]
                ])
            }
        }
        stage('Code analysis') {
            steps {
                tryOr('UNSTABLE') {
                    gradlew 'detekt'
                }
                tryOr('UNSTABLE') {
                    gradlew 'clean lintDevDebug'
                }
            }
            post {
                always {
                    junit allowEmptyResults: false, testResults: "app/build/test-results/**/*.xml"
                }
                success {
                    setGitHubPullRequestStatus(context: env.context_test, message: "Code analysis OK", state: "SUCCESS")
                }
                unstable {
                    setGitHubPullRequestStatus(context: env.context_test, message: "Code analysis failed", state: "FAILURE")
                }
            }
        }
        stage("Unit Tests") {
            steps {
                tryOr('UNSTABLE') {
                    gradlew 'clean app:testDevDebugUnitTest'
                }
            }
            post {
                always {
                    junit allowEmptyResults: false, testResults: "app/build/test-results/**/*.xml"
                }
                success {
                    setGitHubPullRequestStatus(context: env.context_test, message: "Tests ok", state: "SUCCESS")
                }
                unstable {
                    setGitHubPullRequestStatus(context: env.context_test, message: "Tests Failed", state: "FAILURE")
                }
            }
        }
        stage("UI Tests") {
            steps {
                println "Ui tests"
            }
        }
    }
    post {
            success {
                setGitHubPullRequestStatus(context: env.context_job, message: "All is good", state: "SUCCESS")
            }
            failure {
                setGitHubPullRequestStatus(context: env.context_job, message: "Fatal error", state: "FAILURE")
            }
            unstable {
                setGitHubPullRequestStatus(context: env.context_job, message: "Fails but ok", state: "SUCCESS")
            }
            aborted {
                setGitHubPullRequestStatus(context: env.context_job, message: "Build canceled", state: "FAILURE")
            }
        }
}

def gradlew(String task) {
    sh "./gradlew ${task} -PdisablePreDex --info"
}

void tryOr(jobResult, Closure<Void> task) {
    script {
        try {
            task()
        } catch (e) {
            currentBuild.result = jobResult
        }
    }
}